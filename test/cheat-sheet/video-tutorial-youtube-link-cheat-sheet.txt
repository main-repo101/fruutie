##[1.0]REM: REACT + VITE project set-up. [SPA]

#[1.1]REM: Init build tool namely 'VITE'
[project-name/] > npm create vite@latest [<project-name>]
select a framework: REACT
select a variant: TS or JS


#[1.2]REM: modify file '/vite.config.{ts,js}' for custom port;
import { defineConfig } from 'vite';
import react from '@vite/plugin-react';
//import react from '@vitejs/plugin-react';
export default defineConfig({
	plugins: [react()],
	server: {
		port: 5501,
	},
});


#[1.3]REM: Install deps for deployment and dev.
project-name/ > npm install


#[1.4]REM: Serve/Run the web app. The config/script found on '/package.json'
project-name/ > npx run dev


#[1.5]REM: Can we rename this boiler-plate file '/src/main.{tsx,jsx}' into
#[1.5]REM: '/src/index.{tsx,jsx}', is it allright? Right? And make sure to 
#[1.5]REM: reflect those thing that depends on it.
#[1.5]REM: Answer: Yes it can be done...


##[2.0]REM: Tailwindcss + Vite on REACT project
project-name/ > npm install -D tailwindcss postcss autoprefixer
project-name/ > npx tailwindcss init -p

#[2.1]REM: Add the paths to all of your template files or those files that 
#[2.1]REM: uses tailwindcss classes, you usually find it here '/tailwindcss.config.js' file.
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

#[2.2]REM: Add those '@tailwind' directives for each of Tailwind's layers
#[2.2]REM: to your '/src/css/index.css' input file.
@tailwind base;
@tailwind components;
@tailwind utilities;

#[2.3]REM: Start using Tailwind in your React project put it to 
#[2.3]REM: the 'className' of React reserve keyword
#[2.3]REM: Such as in your '/src/App.{tsx,jsx}'
export default function App() {
  return (
    <h1 className="text-3xl font-bold underline">
      Hello world!
      <p style={{ color: 'orange', fontSize: '18px' }}>Hi there!!!</p>
    </h1>
  );
}

#[2.4]REM: Re-run the said script found at '#[1.4]REM:'
project-name/ > npx run dev
#[2.4]REM: or for running it as globally???
project-name/ > npm run dev


#[0.0]REM: 


#[3.0]REM: JSX or TSX quick tut/course
#[3.1]REM: Fragment tag
return (
  <>
  </>
);

#[3.2]REM: JSX or TSX needed to return with a single-parent/base node.
return (
  <div id='BASE_NODE'>
    <div id='DERIVE_NODE_ONE'><div>
    <a id='DERIVE_NODE_TWO'></a>
  </div>
);
#[3.2]REM: or with frament tag.
return (
  <>
    <div id='DERIVE_NODE_ONE'><div>
    <a id='DERIVE_NODE_TWO'></a>
  </>
);

#[3.3]REM: JSX or TSX comment
{/* Multi-line comment */}
{/* <!-- Multi-line comment --> */}


#[3.4]REM: JSX or TSX looping with functional programming
#[3.4]REM: '/private/db/data-list.json'
[
  {
    id: '001',
    body: 'body-one'
  },
  {
    id: '002',
    body: 'body-two'
  },
];
#[3.4]REM: '/src/component/data-list.{jsx,tsx}'
import {PROJECT_ROOT_DIR} from '../module-info.{jsx,tsx}';
import dataList from `${PROJECT_ROOT_DIR}/private/db/data-list.json`;
import card from `${PROJECT_ROOT_DIR}/src/component/card.{jsx,tsx}`

export default function dataList() {
  return (
    <section id='DATA_LIST'>
      <ul>
        <card>
        {dataList.map( (element) => {
          console.log( element.id, element.body );
          <li>
            <span className='text-xl'>{element.id}</span>
            <p>{element.body}</p>
          </li>
        });}
        </card>
      </ul>
    </section>
  )
}


##[4.0]REM: Package 'react-icons' with 'fa' (font-awesome)
project-name/ > npm i react-icons

#[4.1]REM: How to import it do this
import { FaMapMarker as icon_map_marker } from 'react-icons/fa';
...
return (<>
  <p><span className='text-xl'><icon_map_marker/></span> Location.</p>
</>);


##[5.0]REM: Package 'react-router-dom', route-dispatcher...
project-name/ > npm i react-router-dom

#[5.1]REM: How to use/import it, do this; in your 
#[5.1]REM: '/src/App.{tsx,jsx}'
import {
  Route,
  RouterProvider,
  createBrowserRouter,
  createRoutesFromElements
} from 'react-router-dom';
import {PROJECT_ROOT_DIR} from '/module-info.{jsx,tsx}';
import mainLayout from `${PROJECT_ROOT_DIR}/src/component/layout/mainLayout.{jsx,tsx}`;
import homePage from `${PROJECT_ROOT_DIR}/src/component/page/homePage.{jsx,tsx}`;
import aboutUs from `${PROJECT_ROOT_DIR}/src/component/page/aboutUs.{jsx,tsx}`;
import notFoundPage from `${PROJECT_ROOT_DIR}/src/component/page/notFoundPage.{jsx,tsx}`;

export default function App() {
  const ROUTER = createBrowserRouter(
    createRoutesFromElements(
      <Route path='/' element={<mainLayout/>}>
        <Route index element={<homePage/>}/>
        <Route path='/about-us' element={<aboutUs/>}/>
        <Route path='*' element={<notFoundPage/>}/>
      </Route>
    )
  );
  return (
    <RouterProvider router={ROUTER} />;
  );
}

#[5.1]REM: '/src/component/layout/mainLayout.{jsx,tsx}'
import { Outlet } from 'react-router-dom';
import {PROJECT_ROOT_DIR} from '../../module-info.{jsx,tsx}';
import navBar from `${PROJECT_RROT_DIR}/src/component/navBar.{jsx,tsx}`;
import navBar from `${PROJECT_RROT_DIR}/src/component/footer.{jsx,tsx}`;
export default function mainLayout() {
  return (
    <>
      <navBar/>
      <Outlet/>
      <footer/>
    </>
  );
}

#[5.1]REM: '/src/component/page/homePage.{tsx,jsx}'
import {PROJECT_ROOT_DIR} from '../../module-info.{jsx,tsx}';

export default function homePage() {
  return (
    <>
      <h1>Home page</h1>
    </>
  );
}


#[6.0]REM: Link from 'react-router-dom'
#[6.0]REM: Purpose no refresh???
import {Link} from 'react-router-dom';
...
<Link 
  to='<path>'

  >
  home
</Link>

#[7.0]REM: NavLink from 'react-router-dom'
#[7.0]REM: Purpose; 'Link++' can do can do 'active' eventListener?
#[7.0]REM: it add 'isActive' className on 'NavLink'
import {NavLink} from 'react-router-dom';

export default function navBar() {
  const LINK_STYLE_CLASS = ({isActive}) => {
    return isActive?
      'bg-slate-950 text-white' :
      'bg-white text-slate-950';
  };
  ...
  <NavLink 
    to='<path>'
    className={LINK_STYLE_CLASS}
    >
    about-us
  </NavLink>;
}

#[8.0]REM: Mock DB with 'json-server'
project-name/ > npm i -D json-server

#[8.1]REM: At '/package.json' add a command/script
"scripts": {
  ...,
  "mock-server": "json-server --watch /private/db/data-list.json --port 8000"
}

#[8.2]REM: modify the '#[3.4]REM:' to fit on this said mock db server
#[8.2]REM: '/private/db/data-list.json'
{
  data-msg: [
    {
      id: '001',
      body: 'body-one'
    },
    {
      id: '002',
      body: 'body-two'
    },
  ]
}

#[8.2]REM: modify '#[3.4]REM: '/src/component/data-list.{jsx,tsx}''
import {useState, useEffect} from 'react';
imoprt spinner from `${PROJECT_ROOT_DIR}/src/component/spinner.{tsx,jsx}`

...
export default function dataList() {
  const [GET_DATA_LIST, SET_DATA_LIST] = useState([]);
  const [IS_LOADING, SET_IS_LOADING] = useState(true);
  useEffect(
    () => {
      async function fetchDataList() {
        try {
          const RES = await fetch('<ip-address>:<port>/data-msg');
          const RES_DATA = await RES.json();
          SET_DATA_LIST( RES_DATA );
        }
        catch ( error: any ) {
          console.log('::: ', error);
        } finally {
          SET_IS_LOADING( false );
        }
      };      
      fetchDataList();
    },
    []
  );
  return ...
    {IS_LOADING? (
      <spinner isLoading={GET_IS_LOADING}/>
    ) : {
      GET_DATA_LIST.map( (element) => {
        console.log( element.id, element.body );
        <li>
          <span className='text-xl'>{element.id}</span>
          <p>{element.body}</p>
        </li>
      });
    }}
  ...
}

#[8.2]REM: Package for spinners 'react-spinners'
project-name/ > npm i react-spinners

#[8.2]REM: how to use this 'react-spinners' you can create another
#[8.2]REM: component for it namely '/src/component/spinner.{tsx,jsx}'
import ClipLoader from 'reat-spinners/Cli';

const CSS_STYLE = {
  diplay: "block",
  margin: "100px auto"
}

export default function spinner( {isLoading} ) {
  return (
    <ClipLoader
      color='red'
      loading={isLoading}
      cssOverride={CSS_STYLE}
      size={150}
      />
  );
}


#[9.0]REM: set up proxy for the said mocked db server
#[9.0]REM: modify the '#[1.2]REM:'
import { defineConfig } from 'vite';
import react from '@vite/plugin-react';
export default defineConfig({
  plugins: [react()],
  server: {
    port: 5501,
    proxy: {
      '/api': {
        target: '<ip-address>:<port>',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, '')
      }
    }
  },
});

#[10.0]REM: vs-code plugin; 'multiple cursor case preserve extension'
#[10.0]REM: It is for renaming symobls without disturbing their letter cases...